import streamlit as st
# pip install google-api-python-client
from googleapiclient.discovery import build
import pymongo
import psycopg2
import pandas as pd

#API connection
def api_connect():
    api_id = "AIzaSyA-kEmZ0LnGz9YvUF2-fpiFLFNlA_IDJBk"
    api_server_name = "youtube"
    api_version = "v3"
    
    youtube = build(api_server_name,api_version,developerKey=api_id)
    return youtube

youtube = api_connect()




#function to get channel details

def get_channel_info(channel_id):
    request = youtube.channels().list(
                part = "snippet,ContentDetails,statistics",
                id = channel_id,
    )
    response = request.execute()

    for i in response["items"]:
        data = dict(Channel_Name = i["snippet"]["title"],
                    Channel_ID = i["id"],
                    Subscribers = i["statistics"]["subscriberCount"],
                    Views = i["statistics"]["viewCount"],
                    Total_videos = i["statistics"]["videoCount"],
                    Channel_Description = i["snippet"]["description"],
                    Playlist_ID = i["contentDetails"]["relatedPlaylists"]["uploads"])
        return data

    
    
    
#to get video ids

def get_video_ids(channel_id):
    video_ids = []
    request = youtube.channels().list(
                id = channel_id,
                part = "ContentDetails",)

    response = request.execute()

    playlist_id = response["items"][0]["contentDetails"]["relatedPlaylists"]["uploads"]

    next_page_token = None

    while True:

        response1 = youtube.playlistItems().list(
                                                part = "snippet",
                                                playlistId = playlist_id,
                                                maxResults = 50,
                                                pageToken = next_page_token).execute()
        for i in range(len(response1["items"])):
            video_ids.append(response1["items"][i]["snippet"]["resourceId"]["videoId"])
        next_page_token = response1.get("nextPageToken")
        if next_page_token is None:
            break
    return video_ids





#get video information

def get_video_info(video_ids):
    video_data = []
    for video_id in video_ids:
        request = youtube.videos().list(
                                    part = "snippet,ContentDetails,statistics",
                                    id = video_id)
        response = request.execute()

        for item in response["items"]:
            data = dict(channel_name = item["snippet"]["channelTitle"],
                       channel_id = item["snippet"]["channelId"],
                       video_id = item["id"],
                       Title = item["snippet"]["title"],
                       Tags = item["snippet"].get("tags"),
                       Thumbnail = item["snippet"]["thumbnails"]["default"]["url"],
                       Description = item["snippet"].get("description"),
                       Published_date = item["snippet"]["publishedAt"],
                       Duration = item["contentDetails"]["duration"],
                       Views = item["statistics"].get("viewCount"),
                       Comments = item["statistics"].get("commentCount"),
                       Likes = item["statistics"].get("likeCount"),
                       favorite_Count = item["statistics"]["favoriteCount"],
                       Definition = item["contentDetails"]["definition"],
                       Caption_status = item["contentDetails"]["caption"])

            video_data.append(data)
    return video_data



#to get comment details

def get_comment_info(video_ids):
    comment_data = []

    try:
        for video_id in video_ids:
            request = youtube.commentThreads().list(
                                                    part = "snippet",
                                                    videoId = video_id,
                                                    maxResults = 50)
            response = request.execute()

            for item in response["items"]:
                data = dict(comment_id = item["snippet"]["topLevelComment"]["id"],
                            video_id = item["snippet"]["topLevelComment"]["snippet"]["videoId"],
                            comment_text = item["snippet"]["topLevelComment"]["snippet"]["textDisplay"],
                            comment_author = item["snippet"]["topLevelComment"]["snippet"]["authorDisplayName"],
                            comment_published = item["snippet"]["topLevelComment"]["snippet"]["publishedAt"])

                comment_data.append(data)
    except:
        pass
    return comment_data



#to get playlist details

def get_playlist_details(channel_id):
    next_page_token = None
    all_data = []
    while True:
        request = youtube.playlists().list(
                                            part = "snippet,contentDetails",
                                            channelId = channel_id,
                                            maxResults = 50,
                                            pageToken = next_page_token
                                            )
        response = request.execute()

        for item in response["items"]:
            data = dict(playlist_id = item["id"],
                        Title = item["snippet"]["title"],
                        channel_id = item["snippet"]["channelId"],
                        channel_name = item["snippet"]["channelTitle"],
                        publishedAt = item["snippet"]["publishedAt"],
                        video_count = item["contentDetails"]["itemCount"])
            all_data.append(data)
            
        next_page_token = response.get("nextPageToken")
        if next_page_token is None:
            break
    return all_data
#**********************************************************************************************************************

#upload to mongodb
client = pymongo.MongoClient("mongodb+srv://hariharannandagopal:Ashuhari1628@cluster0.jyzlrsx.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0")
DB = client["youtube_data"]



def channel_details(channel_id):
    ch_details = get_channel_info(channel_id)
    pl_details = get_playlist_details(channel_id)
    vi_ids = get_video_ids(channel_id)
    vi_details = get_video_info(vi_ids)
    com_details = get_comment_info(vi_ids)
    
    collection_1 = DB["Channel_Details"]
    collection_1.insert_one({"Channel_Information":ch_details,
                             "Playlist_Information":pl_details,
                             "Video_Information":vi_details,
                             "Comment_Information":com_details})
    
    return "UPLOADED SUCCESSFULLY"
    
#     sci_wit_sam = channel_details("UChGd9JY4yMegY6PxqpBjpRA")
#     my_gk = channel_details("UC5cY198GU1MQMIPJgMkCJ_Q")
#     areatrisk = channel_details("UCM2wtmMiQWVuEcn-zvcxo4w")
    #uploading channels^

#**********************************************************************************************************************
#postgresql    
#to create table and insert values of channel details into sql

def channels_table_sql(single_channel_s):
    mydb = psycopg2.connect(host = "localhost",
                            user = "postgres",
                            password = "12345",
                            database = "youtube_data",
                            port = "5432")
    cursor = mydb.cursor()

#     drop_query = '''drop table if exists channels'''
#     cursor.execute(drop_query)
#     mydb.commit()

    
    create_query = '''create table if not exists channels(channel_Name varchar(100),
                                                          channel_Id varchar(80) primary key,
                                                          Subscribers bigint,
                                                          Views bigint,
                                                          Total_Videos int,
                                                          Channel_Description text,
                                                          Playlist_Id varchar(80))'''
    
    cursor.execute(create_query)
    mydb.commit()




    single_channel_details = []
    DB = client["youtube_data"]
    collection_1 = DB["Channel_Details"]
    for ch_data in collection_1.find({"Channel_Information.Channel_Name":single_channel_s},{"_id":0}):
        single_channel_details.append((ch_data)["Channel_Information"])
        
        
    df_single_ch_detail = pd.DataFrame(single_channel_details)

    for index,row in df_single_ch_detail.iterrows():
        insert_query = '''insert into channels(channel_Name,
                                               channel_Id,
                                               Subscribers,
                                               Views,
                                               Total_Videos,
                                               Channel_Description,
                                               Playlist_Id)

                                               values(%s,%s,%s,%s,%s,%s,%s)'''

        values = (row["Channel_Name"],
                 row["Channel_ID"],
                 row["Subscribers"],
                 row["Views"],
                 row["Total_videos"],
                 row["Channel_Description"],
                 row["Playlist_ID"])
        
        try:
            cursor.execute(insert_query,values)
            mydb.commit()
        except:
            news = f"channel {single_channel_s} Already Exists"
            return news
        
        
        
#to create table and insert values of video details into sql

def videos_table_sql(single_channel_s):
    mydb = psycopg2.connect(host = "localhost",
                            user = "postgres",
                            password = "12345",
                            database = "youtube_data",
                            port = "5432")
    cursor = mydb.cursor()

#     drop_query = '''drop table if exists videos'''
#     cursor.execute(drop_query)
#     mydb.commit()

    
    create_query = '''create table if not exists videos(channel_name varchar(100),
                                                       channel_id varchar(100),
                                                       video_id varchar(30) primary key,
                                                       Title varchar(150),
                                                       Tags text,
                                                       Thumbnail varchar(200),
                                                       Description text,
                                                       Published_date timestamp,
                                                       Duration interval,
                                                       Views bigint,
                                                       Comments int,
                                                       Likes bigint,
                                                       favorite_Count int,
                                                       Definition varchar(10),
                                                       Caption_status varchar(60))'''
    cursor.execute(create_query)
    mydb.commit()
    
    
    single_video_details = []
    DB = client["youtube_data"]
    collection_1 = DB["Channel_Details"]
    for vi_data in collection_1.find({"Channel_Information.Channel_Name":single_channel_s},{"_id":0}):
        single_video_details.append(vi_data["Video_Information"])
            

    df_single_video_details = pd.DataFrame(single_video_details[0])


    for index,row in df_single_video_details.iterrows():
        insert_query = '''insert into videos(channel_name,
                                                   channel_id,
                                                   video_id,
                                                   Title,
                                                   Tags,
                                                   Thumbnail,
                                                   Description,
                                                   Published_date,
                                                   Duration,
                                                   Views,
                                                   Comments,
                                                   Likes,
                                                   favorite_Count,
                                                   Definition,
                                                   Caption_status)

                                               values(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)'''

        values = (row['channel_name'],
                 row['channel_id'],
                 row['video_id'],
                 row['Title'],
                 row['Tags'],
                 row['Thumbnail'],
                 row['Description'],
                 row['Published_date'],
                 row['Duration'],
                 row['Views'],
                 row['Comments'],
                 row['Likes'],
                 row['favorite_Count'],
                 row['Definition'],
                 row['Caption_status'])
        
        cursor.execute(insert_query,values)
        mydb.commit()
        
 ##to create table and insert values of playlist details into sql


def playlist_table_sql(single_channel_s):

    mydb = psycopg2.connect(host = "localhost",
                            user = "postgres",
                            password = "12345",
                            database = "youtube_data",
                            port = "5432")
    cursor = mydb.cursor()

#     drop_query = '''drop table if exists playlist'''
#     cursor.execute(drop_query)
#     mydb.commit()

    
    create_query = '''create table if not exists playlists(playlist_id varchar(100) primary key,
                                                          Title varchar(100),
                                                          channel_id varchar(100),
                                                          channel_name varchar(100),
                                                          publishedAt timestamp,
                                                          video_count int)'''
    cursor.execute(create_query)
    mydb.commit()

   


    single_playlist_details = []
    DB = client["youtube_data"]
    collection_1 = DB["Channel_Details"]
    for pl_data in collection_1.find({"Channel_Information.Channel_Name":single_channel_s},{"_id":0}):
        single_playlist_details.append(pl_data["Playlist_Information"])
            

    df_single_playlist_details = pd.DataFrame(single_playlist_details[0])

    for index,row in df_single_playlist_details.iterrows():
        insert_query = '''insert into playlists(playlist_id,
                                               Title,
                                               channel_id,
                                               channel_name,
                                               publishedAt,
                                               video_count)

                                               values(%s,%s,%s,%s,%s,%s)'''

        values = (row["playlist_id"],
                 row["Title"],
                 row["channel_id"],
                 row["channel_name"],
                 row["publishedAt"],
                 row["video_count"])
        
        cursor.execute(insert_query,values)
        mydb.commit()
            
#to create table and insert values of comment details into sql


def comment_table_sql(single_channel_s):
    mydb = psycopg2.connect(host = "localhost",
                            user = "postgres",
                            password = "12345",
                            database = "youtube_data",
                            port = "5432")
    cursor = mydb.cursor()

#     drop_query = '''drop table if exists comments'''
#     cursor.execute(drop_query)
#     mydb.commit()


    create_query = '''create table if not exists comments(comment_id varchar(100) primary key,
                                                            video_id varchar(50),
                                                            comment_text text,
                                                            comment_author varchar(150),
                                                            comment_published timestamp)'''
    cursor.execute(create_query)
    mydb.commit()
    
    
    single_comment_details = []
    DB = client["youtube_data"]
    collection_1 = DB["Channel_Details"]
    for com_data in collection_1.find({"Channel_Information.Channel_Name":single_channel_s},{"_id":0}):
        single_comment_details.append(com_data["Comment_Information"])
            

    df_single_comment_details = pd.DataFrame(single_comment_details[0])

    for index,row in df_single_comment_details.iterrows():
        insert_query = '''insert into comments(comment_id,
                                                video_id,
                                                comment_text,
                                                comment_author,
                                                comment_published)

                                              values(%s,%s,%s,%s,%s)''' 

        values = (row['comment_id'],
                 row['video_id'],
                 row['comment_text'],
                 row['comment_author'],
                 row['comment_published'])


        cursor.execute(insert_query,values)
        mydb.commit()
        
        
#calling all functions and creating tables by single function called table


def tables(single_channel_s):
    news = channels_table_sql(single_channel_s)
    if news:
        return news
    else:
        playlist_table_sql(single_channel_s)
        videos_table_sql(single_channel_s)
        comment_table_sql(single_channel_s)
    
    return("tables created sucessfully")
#**********************************************************************************************************************
#to show like database

def show_channel_table():
    ch_list = []
    DB = client["youtube_data"]
    collection_1 = DB["Channel_Details"]
    for ch_data in collection_1.find({},{"_id":0,"Channel_Information":1}):
        ch_list.append((ch_data)["Channel_Information"])
    df = st.dataframe(ch_list)
    
    return df


def show_playlist_table():
    pl_list = []
    DB = client["youtube_data"]
    collection_1 = DB["Channel_Details"]
    for pl_data in collection_1.find({},{"_id":0,"Playlist_Information":1}):
        for i in range(len(pl_data["Playlist_Information"])):
            pl_list.append(pl_data["Playlist_Information"][i])

    df1 = st.dataframe(pl_list)
    
    return df1



def show_video_table():
    vi_list = []
    DB = client["youtube_data"]
    collection_1 = DB["Channel_Details"]
    for vi_data in collection_1.find({},{"_id":0,"Video_Information":1}):
        for i in range(len(vi_data["Video_Information"])):
            vi_list.append(vi_data["Video_Information"][i])

    df2 = st.dataframe(vi_list)
    
    return df2


def show_comment_table():
    com_list = []
    DB = client["youtube_data"]
    collection_1 = DB["Channel_Details"]
    for com_data in collection_1.find({},{"_id":0,"Comment_Information":1}):
        for i in range(len(com_data["Comment_Information"])):
            com_list.append(com_data["Comment_Information"][i])

    df3 = st.dataframe(com_list)
    
    return df3


#**********************************************************************************************************************

#streamlit query

with st.sidebar:
    st.title(":red[YOUTUBE DATA HARVESTING AND WAREHOUSING]")
    st.header("Skills take away")
    st.caption("Python Scripting")
    st.caption("Data Collection")
    st.caption("MongoDB")
    st.caption("API Integration")
    st.caption("Data Management using MongoDB and SQL")

    
channel_id = st.text_input("Enter Channel ID")

if st.button("Collect and store data"):
    ch_ids = []
    DB = client["youtube_data"]
    collection_1 = DB["Channel_Details"]
    for ch_data in collection_1.find({},{"_id":0,"Channel_Information":1}):
        ch_ids.append(ch_data["Channel_Information"]["'Channel_ID'"])
        
    if channel_id in ch_ids:
        st.success("Channel Details Already Exists")
        
    else:
        insert = channel_details(channel_id)
        st.success(insert)
        
        
all_channels = []
DB = client["youtube_data"]
collection_1 = DB["Channel_Details"]
for ch_data in collection_1.find({},{"_id":0,"Channel_Information":1}):
    all_channels.append((ch_data)["Channel_Information"]["Channel_Name"])
    

unique_channel = st.selectbox("Select channel",all_channels)

        
if st.button("Migrate to SQL"):
    Table = tables(unique_channel)
    st.success(Table)
    
show_table = st.radio("SELECT TABLE FOR DETAILS",("CHANNELS","PLAYLISTS","VIDEOS","COMMENTS"))

if show_table == "CHANNELS":
    show_channel_table()
    
elif show_table == "PLAYLISTS":
    show_playlist_table()
    
elif show_table == "VIDEOS":
    show_video_table()
    
elif show_table == "COMMENTS":
    show_comment_table()
    
    
#questions

#sql connection

mydb = psycopg2.connect(host = "localhost",
                        user = "postgres",
                        password = "12345",
                        database = "youtube_data",
                        port = "5432")
cursor = mydb.cursor()

questions = st.selectbox("HOW CAN WE HELP YOU?",("1.What are the names of all the videos and their corresponding channels?",
                                                 "2.Which channels have the most number of videos, and how many they have?",
                                                 "3.What are the top 10 most viewed videos and their respective channels?",
                                                 "4.How many comments were made on each video, and what are their names?",
                                                 "5.Which videos have the highest number of likes, and what are their channel names?",
                                                 "6.What is the total number of likes for each video, and what are video names?",
                                                 "7.What is the total number of views for each channel, and what are their channel names?",
                                                 "8.What are the names of all the channels that have published videos in the 2022?",
                                                 "9.What is the average duration of all videos in each channel, and what are their channel names?",
                                                 "10.Which videos have the highest number of comments, and what are their channel names?"))


#question1

if questions == "1.What are the names of all the videos and their corresponding channels?":
    query1 = '''select title as videos,channel_name as channelname from videos'''
    cursor.execute(query1)
    mydb.commit()
    t1 = cursor.fetchall()
    df1 = pd.DataFrame(t1,columns = ["video Title","Channel Name"])
    st.write(df1)
    
#question2

elif questions == "2.Which channels have the most number of videos, and how many they have?":
    query2 = '''select channel_name as channelname,total_videos as no_videos from channels order by total_videos desc'''
    cursor.execute(query2)
    mydb.commit()
    t2 = cursor.fetchall()
    df2 = pd.DataFrame(t2,columns = ["Channel Name","No.of Videos"])
    st.write(df2)
    
#question3

elif questions == "3.What are the top 10 most viewed videos and their respective channels?":
    query3 = '''select channel_name as channelname,views as views,title as videotitle from videos 
                where views is not null order by views desc limit 10'''
    cursor.execute(query3)
    mydb.commit()
    t3 = cursor.fetchall()
    df3 = pd.DataFrame(t3,columns = ["Channel Name","No.of Views","Vdeo Title"])
    st.write(df3)
    
#question4  

elif questions == "4.How many comments were made on each video, and what are their names?":
    query4 = '''select title as videotitle,comments as Comments from videos 
                where comments is not null'''
    cursor.execute(query4)
    mydb.commit()
    t4 = cursor.fetchall()
    df4 = pd.DataFrame(t4,columns = ["Video Title","No.of Comments",])
    st.write(df4)
    
#question5
    
elif questions == "5.Which videos have the highest number of likes, and what are their channel names?":
    query5 = '''select channel_name as channelname,title as title,likes as likes from videos where likes is not null order by likes desc'''
    cursor.execute(query5)
    mydb.commit()
    t5 = cursor.fetchall()
    df5 = pd.DataFrame(t5,columns = ["channel_name","Video Title","No.of Likes"])
    st.write(df5)
    
#question6
    
elif questions == "6.What is the total number of likes for each video, and what are video names?":
    query6 = '''select title as title,likes as likes from videos'''
    cursor.execute(query6)
    mydb.commit()
    t6 = cursor.fetchall()
    df6 = pd.DataFrame(t6,columns = ["Video_Title","No.of Likes"])
    st.write(df6)
    
#question7
    
elif questions == "7.What is the total number of views for each channel, and what are their channel names?":
    query7 = '''select channel_name as channelname,views as viewcount from channels'''
    cursor.execute(query7)
    mydb.commit()
    t7 = cursor.fetchall()
    df7 = pd.DataFrame(t7,columns = ["Channel_Name","Total_Views"])
    st.write(df7)
    
#question8
    
elif questions == "8.What are the names of all the channels that have published videos in the 2022?":
    query8 = '''select channel_name as channelname,title as videotitle,published_date as date from videos
    where extract(year from published_date)=2022'''
    cursor.execute(query8)
    mydb.commit()
    t8 = cursor.fetchall()
    df8 = pd.DataFrame(t8,columns = ["Channel_Name","Video_Title","Published_At"])
    st.write(df8)
    
#question9
    
elif questions == "9.What is the average duration of all videos in each channel, and what are their channel names?":
    query9 = '''select channel_name as channelname,AVG(duration) as averageduration from videos 
    group by channel_name'''
    cursor.execute(query9)
    mydb.commit()
    t9 = cursor.fetchall()
    df9 = pd.DataFrame(t9,columns = ["Channel_Name","Average_Duration"])


    T9 = []
    for index,row in df9.iterrows():
        channel_title = row["Channel_Name"]
        avg_duration = row["Average_Duration"]
        avg_duration_str = str(avg_duration)
        T9.append(dict(Channel_Title = channel_title,Avg_duration = avg_duration_str))
    df91 = pd.DataFrame(T9)
    st.write(df91)
    
#question10  

elif questions == "10.Which videos have the highest number of comments, and what are their channel names?":
    query10 = '''select title as videotitle,channel_name as channelname,comments as comments from videos 
    where comments is not null order by comments desc'''
    cursor.execute(query10)
    mydb.commit()
    t10 = cursor.fetchall()
    df10 = pd.DataFrame(t10,columns = ["Video_title","Channel_name","No.of Comments"])
    st.write(df10)


